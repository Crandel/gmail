# options for analysis running
run:
  # include test files or not, default is true
  tests: true
  timeout: 10m

  # list of build tags, all linters use it. Default is empty list.
  build-tags:
    - integration
    - replica

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  #skip-files:
  #  - ".*\\.my\\.go$"
  #  - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  modules-download-mode: vendor

# output configuration options
output:
  # print linter name in the end of issue text, default is true
  print-linter-name: true

linters:
  disable-all: true
  fast: false
  enable:
    - errcheck
    - gocritic
    - goimports
    - gci
    - revive
    - gosimple
    - govet
    - ineffassign
    - misspell
    - nakedret
    - prealloc
    - staticcheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - errorlint
    - paralleltest
    - forbidigo
    - gofmt

# all available settings of specific linters
linters-settings:
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false

    # List of functions to exclude from checking, where each entry is a single function to exclude.
    # See https://github.com/kisielk/errcheck#excluding-functions for details.
    exclude-functions:
      - fmt:*
      - io/ioutil:^Read.*

    # path to a file containing a list of functions to exclude from checking
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    #exclude: /path/to/file.txt

  funlen:
    lines: 60
    statements: 40

  govet:
    # settings per analyzer
    #settings:
    #  printf: # analyzer name, run `go tool vet help` to see all analyzers
    #    funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
    #      - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
    #      - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
    #      - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
    #      - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    # enable or disable analyzers by name
    enable:
      - asmdecl
      - assign
      - atomic
      - bools
      - buildtag
      - cgocall
      - composites
      - copylocks
      - httpresponse
      - loopclosure
      - lostcancel
      - nilfunc
      - printf
      - shadow
      - shift
      - stdmethods
      - structtag
      - tests
      - unmarshal
      - unreachable
      - unsafeptr
      - unusedresult

  revive:
    ignore-generated-header: true
    rules:
      - name: exported
      - name: comment-spacings
        arguments:
          - nolint # Use `//nolint` instead of `// nolint` because machine-readable comments should have no space by Go convention - https://golangci-lint.run/usage/false-positives/#nolint-directive
      - name: range-val-address
      - name: bare-return
      - name: confusing-results
      - name: context-as-argument
      - name: context-keys-type
      - name: receiver-naming
      - name: unexported-return
      - name: early-return
      - name: superfluous-else
      - name: empty-lines

  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true

  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20

  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20

  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 150

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    ignore-words:
      - cancelled

  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30

  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default

  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      - TODO
      - BUG
      - FIXME

  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2

  gofumpt:
    extra-rules: true

  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature

  wsl:
    # If true append is only allowed to be cuddled if appending value is
    # matching variables, fields or types on line above. Default is true.
    strict-append: true
    # Allow calls and assignments to be cuddled as long as the lines have any
    # matching variables, fields or types. Default is true.
    allow-assign-and-call: true
    # Allow multiline assignments to be cuddled. Default is true.
    allow-multiline-assign: true
    # Allow declarations (var) to be cuddled.
    allow-cuddle-declarations: false
    # Allow trailing comments in ending of blocks
    allow-trailing-comment: false
    # Force newlines in end of case at this limit (0 = never).
    force-case-trailing-whitespace: 0

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors.
    errorf: true
    # Permit more than 1 %w verb // todo: turn on with Go version 1.20
    errorf-multi: false
    # Check for plain type assertions and type switches.
    asserts: true
    # Check for plain error comparisons.
    comparison: true

  forbidigo:
    # Forbid the following identifiers (list of regexp).
    forbid:
      # We use a particular config structure to load all ENV configurations.
      - ^os\.Getenv$
      - ^os\.LookupEnv$
      # We want to avoid killing our process, please use panics instead
      - ^os\.Exit$
      - ^log\.Fatal$
      - ^log\.Fatalf$
      - ^logger\.Fatal$
      - ^logger\.Fatalf$

  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot > alias > localmodule`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(github.com/Crandel/gmail_checker) # Custom section: groups all imports with the specified Prefix.
      - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
      - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
      - localmodule # Local module section: contains all local packages. This section is not present unless explicitly enabled.
    # Skip generated files.
    # Default: true
    skip-generated: true
    # Enable custom order of sections.
    # If `true`, make the section order the same as the order of `sections`.
    # Default: false
    custom-order: true

issues:
  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false
  exclude-dirs-use-default: true
  max-same-issues: 0
  max-issues-per-linter: 0
  exclude-rules:
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - unused
    - text: const [`\w_]+ should be [`\w_]+
      linters:
        - revive
    - text: type [`\w_]+ should be [`\w_]+
      linters:
        - revive
    - text: function [`\w_]+ should be [`\w_]+
      linters:
        - revive
    - text: method [`\w_]+ should be [`\w_]+
      linters:
        - revive
    - text: method parameter [`\w_]+ should be [`\w_]+
      linters:
        - revive
    - text: interface method parameter [`\w_]+ should be [`\w_]+
      linters:
        - revive
    - text: function parameter [`\w_]+ should be [`\w_]+
      linters:
        - revive
    - text: var [`\w_]+ should be [`\w_]+
      linters:
        - revive
    - text: struct field [`\w_]+ should be [`\w_]+
      linters:
        - revive
    - text: declaration of "err" shadows declaration at line
      linters:
        - govet
    - text: append result not assigned to the same slice
      linters:
        - gocritic
  exclude-files:
    - api/dat/db_schema_generated.go
    - api/wire/schemas.go
